public abstract interface class com/splendo/kaluga/test/bluetooth/CanUpdateMockValue {
	public abstract fun updateMockValue ([B)V
}

public final class com/splendo/kaluga/test/bluetooth/Jvm_mocksKt {
	public static final fun build (Lcom/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder;)Lcom/splendo/kaluga/bluetooth/ServiceWrapper;
	public static final fun createDeviceWrapper (Ljava/lang/String;Lcom/splendo/kaluga/bluetooth/UUID;)Lcom/splendo/kaluga/bluetooth/device/DeviceWrapper;
	public static synthetic fun createDeviceWrapper$default (Ljava/lang/String;Lcom/splendo/kaluga/bluetooth/UUID;ILjava/lang/Object;)Lcom/splendo/kaluga/bluetooth/device/DeviceWrapper;
	public static final fun randomIdentifier ()Lcom/splendo/kaluga/bluetooth/UUID;
}

public final class com/splendo/kaluga/test/bluetooth/MockBluetoothMonitor : com/splendo/kaluga/test/service/MockServiceMonitor, com/splendo/kaluga/bluetooth/BluetoothMonitor {
	public fun <init> (Lkotlinx/coroutines/flow/StateFlow;)V
	public synthetic fun isEnabled ()Lkotlinx/coroutines/flow/Flow;
	public fun isEnabled ()Lkotlinx/coroutines/flow/StateFlow;
}

public final class com/splendo/kaluga/test/bluetooth/MockBluetoothService : com/splendo/kaluga/bluetooth/BluetoothService {
	public fun <init> ()V
	public fun <init> (Lkotlinx/coroutines/flow/MutableStateFlow;Lkotlinx/coroutines/flow/MutableStateFlow;Lkotlinx/coroutines/flow/MutableStateFlow;Lkotlinx/coroutines/flow/MutableStateFlow;Z)V
	public synthetic fun <init> (Lkotlinx/coroutines/flow/MutableStateFlow;Lkotlinx/coroutines/flow/MutableStateFlow;Lkotlinx/coroutines/flow/MutableStateFlow;Lkotlinx/coroutines/flow/MutableStateFlow;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun allDevices ()Lkotlinx/coroutines/flow/Flow;
	public fun devices ()Lkotlinx/coroutines/flow/Flow;
	public final fun getAllDevicesMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getCurrentFilter ()Lkotlinx/coroutines/flow/MutableStateFlow;
	public final fun getDevicesMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getDiscoveredDevicesFlow ()Lkotlinx/coroutines/flow/MutableStateFlow;
	public final fun getFilteredDevicesFlow ()Lkotlinx/coroutines/flow/MutableStateFlow;
	public final fun getPairedDevicesFlow ()Lkotlinx/coroutines/flow/MutableStateFlow;
	public final fun getPairedDevicesMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getScannedDevicesMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getStartScanningMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getStopScanningMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public synthetic fun isEnabled ()Lkotlinx/coroutines/flow/Flow;
	public fun isEnabled ()Lkotlinx/coroutines/flow/MutableStateFlow;
	public fun isScanning (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun isScanningMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public fun pairedDevices (Ljava/util/Set;ZLcom/splendo/kaluga/bluetooth/device/ConnectionSettings;)Lkotlinx/coroutines/flow/Flow;
	public fun scannedDevices (Ljava/util/Set;)Lkotlinx/coroutines/flow/Flow;
	public final fun setCurrentFilter (Lkotlinx/coroutines/flow/MutableStateFlow;)V
	public fun startScanning (Ljava/util/Set;Lcom/splendo/kaluga/bluetooth/BluetoothService$CleanMode;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;)V
	public fun stopScanning (Lcom/splendo/kaluga/bluetooth/BluetoothService$CleanMode;)V
}

public abstract interface annotation class com/splendo/kaluga/test/bluetooth/MockBuilderDsl : java/lang/annotation/Annotation {
}

public final class com/splendo/kaluga/test/bluetooth/MockCharacteristic : com/splendo/kaluga/bluetooth/Characteristic {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/CharacteristicWrapper;Lkotlin/jvm/functions/Function1;)V
	public final fun getUpdateMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public fun updateValue ()V
}

public abstract interface class com/splendo/kaluga/test/bluetooth/MockCharacteristicWrapper : com/splendo/kaluga/bluetooth/CharacteristicWrapper, com/splendo/kaluga/test/bluetooth/CanUpdateMockValue {
}

public final class com/splendo/kaluga/test/bluetooth/MockDescriptor : com/splendo/kaluga/bluetooth/Descriptor {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/DescriptorWrapper;Lkotlin/jvm/functions/Function1;)V
	public final fun getUpdateMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public fun updateValue ()V
}

public abstract interface class com/splendo/kaluga/test/bluetooth/MockDescriptorWrapper : com/splendo/kaluga/bluetooth/DescriptorWrapper, com/splendo/kaluga/test/bluetooth/CanUpdateMockValue {
}

public final class com/splendo/kaluga/test/bluetooth/MockDeviceBuilder {
	public fun <init> (Lkotlin/coroutines/CoroutineContext;)V
	public final fun build ()Lcom/splendo/kaluga/test/bluetooth/device/MockDevice;
	public final fun getConnectionDelay-UwyO8pc ()J
	public final fun getIdentifier ()Lcom/splendo/kaluga/bluetooth/UUID;
	public final fun getManufacturerData ()[B
	public final fun getManufacturerId ()Ljava/lang/Integer;
	public final fun getName ()Ljava/lang/String;
	public final fun getRssi ()I
	public final fun getSetupMocks ()Z
	public final fun getTxPower ()I
	public final fun isConnectable ()Z
	public final fun services (Lkotlin/jvm/functions/Function1;)V
	public final fun setConnectable (Z)V
	public final fun setConnectionDelay-LRDsOJo (J)V
	public final fun setIdentifier (Lcom/splendo/kaluga/bluetooth/UUID;)V
	public final fun setManufacturerData ([B)V
	public final fun setManufacturerId (Ljava/lang/Integer;)V
	public final fun setName (Ljava/lang/String;)V
	public final fun setRssi (I)V
	public final fun setSetupMocks (Z)V
	public final fun setTxPower (I)V
}

public final class com/splendo/kaluga/test/bluetooth/MockDeviceBuilderKt {
	public static final fun buildMockDevice (Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function1;)Lcom/splendo/kaluga/test/bluetooth/device/MockDevice;
}

public final class com/splendo/kaluga/test/bluetooth/MockDeviceInfoBuilder {
	public fun <init> ()V
	public final fun build ()Lcom/splendo/kaluga/bluetooth/device/DeviceInfoImpl;
	public final fun getDeviceName ()Ljava/lang/String;
	public final fun getIdentifier ()Lcom/splendo/kaluga/bluetooth/UUID;
	public final fun getManufacturerData ()[B
	public final fun getManufacturerId ()Ljava/lang/Integer;
	public final fun getRssi ()I
	public final fun getServiceData ()Ljava/util/Map;
	public final fun getTxPowerLevel ()I
	public final fun services (Lkotlin/jvm/functions/Function1;)V
	public final fun setDeviceName (Ljava/lang/String;)V
	public final fun setIdentifier (Lcom/splendo/kaluga/bluetooth/UUID;)V
	public final fun setManufacturerData ([B)V
	public final fun setManufacturerId (Ljava/lang/Integer;)V
	public final fun setRssi (I)V
	public final fun setServiceData (Ljava/util/Map;)V
	public final fun setTxPowerLevel (I)V
}

public final class com/splendo/kaluga/test/bluetooth/MockDeviceInfoBuilderKt {
	public static final fun createMockDevice (Lcom/splendo/kaluga/bluetooth/UUID;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function2;Lkotlinx/coroutines/CoroutineScope;)Lcom/splendo/kaluga/bluetooth/device/DeviceImpl;
	public static final fun createMockDevice (Lcom/splendo/kaluga/bluetooth/device/DeviceWrapper;Lkotlinx/coroutines/CoroutineScope;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceConnectionManager$Builder;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function1;)Lcom/splendo/kaluga/bluetooth/device/DeviceImpl;
	public static synthetic fun createMockDevice$default (Lcom/splendo/kaluga/bluetooth/UUID;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function2;Lkotlinx/coroutines/CoroutineScope;ILjava/lang/Object;)Lcom/splendo/kaluga/bluetooth/device/DeviceImpl;
	public static synthetic fun createMockDevice$default (Lcom/splendo/kaluga/bluetooth/device/DeviceWrapper;Lkotlinx/coroutines/CoroutineScope;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceConnectionManager$Builder;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lcom/splendo/kaluga/bluetooth/device/DeviceImpl;
	public static final fun uuid (Ljava/util/ArrayList;Ljava/lang/String;)Z
}

public final class com/splendo/kaluga/test/bluetooth/MockDeviceWrapper : com/splendo/kaluga/bluetooth/device/DeviceWrapper {
	public fun <init> (Ljava/lang/String;Lcom/splendo/kaluga/bluetooth/UUID;)V
	public fun getIdentifier ()Lcom/splendo/kaluga/bluetooth/UUID;
	public fun getName ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/MocksKt {
	public static final fun createServiceWrapper (Lkotlin/jvm/functions/Function1;)Lcom/splendo/kaluga/bluetooth/ServiceWrapper;
}

public final class com/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder {
	public fun <init> ()V
	public final fun characteristics (Lkotlin/jvm/functions/Function1;)V
	public final fun getCharacteristics ()Ljava/util/List;
	public final fun getUuid ()Lcom/splendo/kaluga/bluetooth/UUID;
	public final fun setUuid (Lcom/splendo/kaluga/bluetooth/UUID;)V
}

public final class com/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Characteristic {
	public fun <init> ()V
	public fun <init> (Lcom/splendo/kaluga/bluetooth/UUID;Ljava/util/List;I)V
	public synthetic fun <init> (Lcom/splendo/kaluga/bluetooth/UUID;Ljava/util/List;IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lcom/splendo/kaluga/bluetooth/UUID;
	public final fun component2 ()Ljava/util/List;
	public final fun component3 ()I
	public final fun copy (Lcom/splendo/kaluga/bluetooth/UUID;Ljava/util/List;I)Lcom/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Characteristic;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Characteristic;Lcom/splendo/kaluga/bluetooth/UUID;Ljava/util/List;IILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Characteristic;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDescriptorUUIDs ()Ljava/util/List;
	public final fun getDescriptors ()Ljava/util/List;
	public final fun getProperties ()I
	public final fun getUuid ()Lcom/splendo/kaluga/bluetooth/UUID;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Characteristic$Builder {
	public fun <init> ()V
	public final fun build ()Lcom/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Characteristic;
	public final fun descriptors (Lkotlin/jvm/functions/Function1;)V
	public final fun getDescriptors ()Ljava/util/List;
	public final fun getProperties ()I
	public final fun getUuid ()Lcom/splendo/kaluga/bluetooth/UUID;
	public final fun setProperties (I)V
	public final fun setUuid (Lcom/splendo/kaluga/bluetooth/UUID;)V
}

public final class com/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Descriptor {
	public fun <init> ()V
	public fun <init> (Lcom/splendo/kaluga/bluetooth/UUID;)V
	public synthetic fun <init> (Lcom/splendo/kaluga/bluetooth/UUID;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lcom/splendo/kaluga/bluetooth/UUID;
	public final fun copy (Lcom/splendo/kaluga/bluetooth/UUID;)Lcom/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Descriptor;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Descriptor;Lcom/splendo/kaluga/bluetooth/UUID;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Descriptor;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getUuid ()Lcom/splendo/kaluga/bluetooth/UUID;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/ServiceWrapperBuilderKt {
	public static final fun characteristic (Ljava/util/ArrayList;Lkotlin/jvm/functions/Function1;)Z
	public static final fun descriptor (Ljava/util/ArrayList;Lcom/splendo/kaluga/bluetooth/UUID;)Z
}

public final class com/splendo/kaluga/test/bluetooth/device/MockAdvertisementData : com/splendo/kaluga/bluetooth/device/BaseAdvertisementData {
	public fun <init> ()V
	public fun <init> (Ljava/lang/String;Ljava/lang/Integer;[BLjava/util/List;Ljava/util/Map;IZ)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/Integer;[BLjava/util/List;Ljava/util/Map;IZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/Integer;
	public final fun component3 ()[B
	public final fun component4 ()Ljava/util/List;
	public final fun component5 ()Ljava/util/Map;
	public final fun component6 ()I
	public final fun component7 ()Z
	public final fun copy (Ljava/lang/String;Ljava/lang/Integer;[BLjava/util/List;Ljava/util/Map;IZ)Lcom/splendo/kaluga/test/bluetooth/device/MockAdvertisementData;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/device/MockAdvertisementData;Ljava/lang/String;Ljava/lang/Integer;[BLjava/util/List;Ljava/util/Map;IZILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/device/MockAdvertisementData;
	public fun equals (Ljava/lang/Object;)Z
	public fun getManufacturerData ()[B
	public fun getManufacturerId ()Ljava/lang/Integer;
	public fun getName ()Ljava/lang/String;
	public fun getServiceData ()Ljava/util/Map;
	public fun getServiceUUIDs ()Ljava/util/List;
	public fun getTxPowerLevel ()I
	public fun hashCode ()I
	public fun isConnectable ()Z
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager {
	public fun <init> ()V
	public final fun connect (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun disconnect (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun discoverServices (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun getMockConnect ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getMockDisconnect ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getMockDiscoverServices ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getMockHandleCancelConnecting ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getMockHandleCancelReconnecting ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getMockPair ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getMockReadRssi ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getMockRequestMtu ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getMockStartConnecting ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getMockStartDisconnected ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getMockStartDiscovering ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getMockUnpair ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun handleCancelConnecting ()V
	public final fun handleCancelReconnecting ()V
	public final fun pair (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun readRssi (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun requestMtu (ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun startConnecting (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;)V
	public final fun startDisconnected ()V
	public final fun startDiscovering ()V
	public final fun unpair (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceStateRepo : com/splendo/kaluga/bluetooth/device/BaseConnectableDeviceStateRepo {
	public fun <init> (Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;Lkotlin/coroutines/CoroutineContext;)V
}

public final class com/splendo/kaluga/test/bluetooth/device/MockDevice : com/splendo/kaluga/bluetooth/device/Device {
	public synthetic fun <init> (Lcom/splendo/kaluga/bluetooth/UUID;Lkotlinx/coroutines/flow/MutableStateFlow;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlin/coroutines/CoroutineContext;ZJLcom/splendo/kaluga/logging/Logger;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public synthetic fun <init> (Lcom/splendo/kaluga/bluetooth/UUID;Lkotlinx/coroutines/flow/MutableStateFlow;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlin/coroutines/CoroutineContext;ZJLcom/splendo/kaluga/logging/Logger;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun addAction (Lcom/splendo/kaluga/bluetooth/device/DeviceAction;)V
	public fun advertisementDataDidUpdate (Lcom/splendo/kaluga/bluetooth/device/BaseAdvertisementData;)V
	public final fun completeAction ()V
	public fun connect (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun disconnect (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getIdentifier ()Lcom/splendo/kaluga/bluetooth/UUID;
	public synthetic fun getInfo ()Lkotlinx/coroutines/flow/Flow;
	public fun getInfo ()Lkotlinx/coroutines/flow/MutableStateFlow;
	public final fun getMockConnectableDeviceManager ()Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;
	public fun getState ()Lkotlinx/coroutines/flow/Flow;
	public final fun handleCancelConnecting ()V
	public fun handleConnected ()V
	public final fun handleConnecting ()V
	public fun handleDisconnected ()V
	public final fun handleDisconnecting ()V
	public final fun handleDiscoverServices (Ljava/util/List;)V
	public final fun handleStartDiscoveringServices ()V
	public fun rssiDidUpdate (I)V
}

public final class com/splendo/kaluga/test/bluetooth/device/MockDeviceConnectionManager : com/splendo/kaluga/bluetooth/device/BaseDeviceConnectionManager {
	public fun <init> (ZLcom/splendo/kaluga/bluetooth/device/DeviceWrapper;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlinx/coroutines/CoroutineScope;Z)V
	public synthetic fun <init> (ZLcom/splendo/kaluga/bluetooth/device/DeviceWrapper;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlinx/coroutines/CoroutineScope;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun connect ()V
	public fun createService (Lcom/splendo/kaluga/bluetooth/ServiceWrapper;)Lcom/splendo/kaluga/bluetooth/Service;
	public fun disconnect ()V
	public fun discoverServices (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun getConnectMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public fun getCurrentState ()Lcom/splendo/kaluga/bluetooth/device/DeviceConnectionManager$State;
	public final fun getDisconnectMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getDiscoverServicesMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getGetCurrentStateMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getHandleCurrentActionCompletedMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getPairMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getPerformActionMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getReadRssiMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getRequestMtuMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getUnpairMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getWillActionSucceed ()Z
	public final fun handleCurrentAction (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleDiscoverCompleted (Ljava/util/List;)V
	public fun handleNewRssi (I)V
	public fun handleUpdatedCharacteristic (Lcom/splendo/kaluga/bluetooth/UUID;ZLkotlin/jvm/functions/Function1;)V
	public fun handleUpdatedDescriptor (Lcom/splendo/kaluga/bluetooth/UUID;ZLkotlin/jvm/functions/Function1;)V
	public fun readRssi (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun requestMtu (ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun setWillActionSucceed (Z)V
}

public final class com/splendo/kaluga/test/bluetooth/device/MockDeviceConnectionManager$Builder : com/splendo/kaluga/bluetooth/device/DeviceConnectionManager$Builder {
	public fun <init> ()V
	public fun <init> (ZZ)V
	public synthetic fun <init> (ZZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun create (Lcom/splendo/kaluga/bluetooth/device/DeviceWrapper;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlinx/coroutines/CoroutineScope;)Lcom/splendo/kaluga/bluetooth/device/BaseDeviceConnectionManager;
	public synthetic fun create (Lcom/splendo/kaluga/bluetooth/device/DeviceWrapper;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlinx/coroutines/CoroutineScope;)Lcom/splendo/kaluga/bluetooth/device/DeviceConnectionManager;
	public final fun getCreateMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getCreatedDeviceConnectionManager ()Lcom/splendo/kaluga/base/collections/ConcurrentMutableList;
}

public final class com/splendo/kaluga/test/bluetooth/device/MockDeviceInfo : com/splendo/kaluga/bluetooth/device/DeviceInfo {
	public fun <init> ()V
	public fun <init> (Lcom/splendo/kaluga/bluetooth/UUID;Lcom/splendo/kaluga/bluetooth/device/BaseAdvertisementData;Ljava/lang/String;ILcom/splendo/kaluga/base/utils/KalugaDate;)V
	public synthetic fun <init> (Lcom/splendo/kaluga/bluetooth/UUID;Lcom/splendo/kaluga/bluetooth/device/BaseAdvertisementData;Ljava/lang/String;ILcom/splendo/kaluga/base/utils/KalugaDate;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lcom/splendo/kaluga/bluetooth/UUID;
	public final fun component2 ()Lcom/splendo/kaluga/bluetooth/device/BaseAdvertisementData;
	public final fun component3 ()Ljava/lang/String;
	public final fun component4 ()I
	public final fun component5 ()Lcom/splendo/kaluga/base/utils/KalugaDate;
	public final fun copy (Lcom/splendo/kaluga/bluetooth/UUID;Lcom/splendo/kaluga/bluetooth/device/BaseAdvertisementData;Ljava/lang/String;ILcom/splendo/kaluga/base/utils/KalugaDate;)Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceInfo;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceInfo;Lcom/splendo/kaluga/bluetooth/UUID;Lcom/splendo/kaluga/bluetooth/device/BaseAdvertisementData;Ljava/lang/String;ILcom/splendo/kaluga/base/utils/KalugaDate;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceInfo;
	public fun distance (D)D
	public fun equals (Ljava/lang/Object;)Z
	public fun getAdvertisementData ()Lcom/splendo/kaluga/bluetooth/device/BaseAdvertisementData;
	public fun getIdentifier ()Lcom/splendo/kaluga/bluetooth/UUID;
	public fun getName ()Ljava/lang/String;
	public fun getRssi ()I
	public fun getUpdatedAt ()Lcom/splendo/kaluga/base/utils/KalugaDate;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public abstract class com/splendo/kaluga/test/bluetooth/device/MockDeviceState : com/splendo/kaluga/base/state/KalugaState {
	public fun remain ()Lkotlin/jvm/functions/Function1;
}

public abstract class com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connectable : com/splendo/kaluga/test/bluetooth/device/MockDeviceState {
	public abstract fun getAsDeviceState ()Lcom/splendo/kaluga/bluetooth/device/ConnectableDeviceState;
	public final fun getDidDisconnect ()Lkotlin/jvm/functions/Function1;
	public final fun getDisconnecting ()Lkotlin/jvm/functions/Function1;
	public abstract fun getMockConnectableDeviceManager ()Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;
	public final fun unpair (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected : com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connectable {
	public final fun pair (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun readRssi (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun requestMtu (ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun startDisconnected ()V
}

public abstract class com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$DiscoveredServices : com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected {
}

public final class com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$Discovering : com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected, com/splendo/kaluga/base/state/HandleAfterOldStateIsRemoved, com/splendo/kaluga/bluetooth/device/ConnectableDeviceState$Connected$Discovering {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;Ljava/lang/Integer;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;)V
	public synthetic fun afterOldStateIsRemoved (Lcom/splendo/kaluga/base/state/KalugaState;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun afterOldStateIsRemoved (Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun component1 ()Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;
	public final fun component2 ()Ljava/lang/Integer;
	public final fun component3 ()Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;
	public final fun copy (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;Ljava/lang/Integer;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;)Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$Discovering;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$Discovering;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;Ljava/lang/Integer;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$Discovering;
	public fun didDiscoverServices (Ljava/util/List;)Lkotlin/jvm/functions/Function1;
	public fun didUpdateMtu (I)Lkotlin/jvm/functions/Function1;
	public fun equals (Ljava/lang/Object;)Z
	public fun getAsDeviceState ()Lcom/splendo/kaluga/bluetooth/device/ConnectableDeviceState;
	public fun getMockConnectableDeviceManager ()Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;
	public fun getMtu ()Ljava/lang/Integer;
	public fun getReconnect ()Lkotlin/jvm/functions/Function1;
	public fun getReconnectionSettings ()Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
	public fun updateReconnectionSettings (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;)Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$HandlingAction : com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$DiscoveredServices, com/splendo/kaluga/bluetooth/device/ConnectableDeviceState$Connected$HandlingAction {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;Ljava/lang/Integer;Ljava/util/List;Lcom/splendo/kaluga/bluetooth/device/DeviceAction;Ljava/util/List;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;)V
	public fun addAction (Lcom/splendo/kaluga/bluetooth/device/DeviceAction;)Lkotlin/jvm/functions/Function1;
	public final fun component1 ()Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;
	public final fun component2 ()Ljava/lang/Integer;
	public final fun component3 ()Ljava/util/List;
	public final fun component4 ()Lcom/splendo/kaluga/bluetooth/device/DeviceAction;
	public final fun component5 ()Ljava/util/List;
	public final fun component6 ()Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;
	public final fun copy (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;Ljava/lang/Integer;Ljava/util/List;Lcom/splendo/kaluga/bluetooth/device/DeviceAction;Ljava/util/List;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;)Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$HandlingAction;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$HandlingAction;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;Ljava/lang/Integer;Ljava/util/List;Lcom/splendo/kaluga/bluetooth/device/DeviceAction;Ljava/util/List;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$HandlingAction;
	public fun didUpdateMtu (I)Lkotlin/jvm/functions/Function1;
	public fun equals (Ljava/lang/Object;)Z
	public fun getAction ()Lcom/splendo/kaluga/bluetooth/device/DeviceAction;
	public fun getActionCompleted ()Lkotlin/jvm/functions/Function1;
	public fun getAsDeviceState ()Lcom/splendo/kaluga/bluetooth/device/ConnectableDeviceState;
	public fun getMockConnectableDeviceManager ()Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;
	public fun getMtu ()Ljava/lang/Integer;
	public fun getNextActions ()Ljava/util/List;
	public fun getReconnect ()Lkotlin/jvm/functions/Function1;
	public fun getReconnectionSettings ()Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;
	public fun getServices ()Ljava/util/List;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
	public fun updateReconnectionSettings (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;)Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$Idle : com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$DiscoveredServices, com/splendo/kaluga/bluetooth/device/ConnectableDeviceState$Connected$Idle {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;Ljava/lang/Integer;Ljava/util/List;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;)V
	public final fun component1 ()Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;
	public final fun component2 ()Ljava/lang/Integer;
	public final fun component3 ()Ljava/util/List;
	public final fun component4 ()Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;
	public final fun copy (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;Ljava/lang/Integer;Ljava/util/List;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;)Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$Idle;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$Idle;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;Ljava/lang/Integer;Ljava/util/List;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$Idle;
	public fun didUpdateMtu (I)Lkotlin/jvm/functions/Function1;
	public fun equals (Ljava/lang/Object;)Z
	public fun getAsDeviceState ()Lcom/splendo/kaluga/bluetooth/device/ConnectableDeviceState;
	public fun getMockConnectableDeviceManager ()Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;
	public fun getMtu ()Ljava/lang/Integer;
	public fun getReconnect ()Lkotlin/jvm/functions/Function1;
	public fun getReconnectionSettings ()Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;
	public fun getServices ()Ljava/util/List;
	public fun handleAction (Lcom/splendo/kaluga/bluetooth/device/DeviceAction;)Lkotlin/jvm/functions/Function1;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
	public fun updateReconnectionSettings (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;)Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$NoServices : com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected, com/splendo/kaluga/bluetooth/device/ConnectableDeviceState$Connected$NoServices {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;Ljava/lang/Integer;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;)V
	public final fun component1 ()Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;
	public final fun component2 ()Ljava/lang/Integer;
	public final fun component3 ()Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;
	public final fun copy (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;Ljava/lang/Integer;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;)Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$NoServices;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$NoServices;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;Ljava/lang/Integer;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connected$NoServices;
	public fun didUpdateMtu (I)Lkotlin/jvm/functions/Function1;
	public fun equals (Ljava/lang/Object;)Z
	public fun getAsDeviceState ()Lcom/splendo/kaluga/bluetooth/device/ConnectableDeviceState;
	public fun getDiscoverServices ()Lkotlin/jvm/functions/Function1;
	public fun getMockConnectableDeviceManager ()Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;
	public fun getMtu ()Ljava/lang/Integer;
	public fun getReconnect ()Lkotlin/jvm/functions/Function1;
	public fun getReconnectionSettings ()Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;
	public fun hashCode ()I
	public fun startDiscovering ()V
	public fun toString ()Ljava/lang/String;
	public fun updateReconnectionSettings (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;)Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connecting : com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connectable, com/splendo/kaluga/base/state/HandleAfterOldStateIsRemoved, com/splendo/kaluga/bluetooth/device/ConnectableDeviceState$Connecting {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;)V
	public synthetic fun afterOldStateIsRemoved (Lcom/splendo/kaluga/base/state/KalugaState;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun afterOldStateIsRemoved (Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun component2 ()Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;
	public final fun copy (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;)Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connecting;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connecting;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connecting;
	public fun equals (Ljava/lang/Object;)Z
	public fun getAsDeviceState ()Lcom/splendo/kaluga/bluetooth/device/ConnectableDeviceState;
	public fun getCancelConnection ()Lkotlin/jvm/functions/Function1;
	public fun getDidConnect ()Lkotlin/jvm/functions/Function1;
	public fun getMockConnectableDeviceManager ()Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;
	public fun handleCancel ()V
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Disconnected : com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connectable, com/splendo/kaluga/bluetooth/device/ConnectableDeviceState$Disconnected {
	public fun <init> (Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;)V
	public final fun component1 ()Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;
	public fun connect (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;)Lkotlin/jvm/functions/Function1;
	public final fun copy (Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;)Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Disconnected;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Disconnected;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Disconnected;
	public fun equals (Ljava/lang/Object;)Z
	public fun getAsDeviceState ()Lcom/splendo/kaluga/bluetooth/device/ConnectableDeviceState;
	public fun getMockConnectableDeviceManager ()Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;
	public fun hashCode ()I
	public fun startConnecting (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings$ReconnectionSettings;)V
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Disconnecting : com/splendo/kaluga/test/bluetooth/device/MockDeviceState$Connectable, com/splendo/kaluga/base/state/HandleAfterOldStateIsRemoved, com/splendo/kaluga/bluetooth/device/ConnectableDeviceState$Disconnecting {
	public fun <init> (Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;)V
	public synthetic fun afterOldStateIsRemoved (Lcom/splendo/kaluga/base/state/KalugaState;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun afterOldStateIsRemoved (Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun component1 ()Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;
	public final fun copy (Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;)Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Disconnecting;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Disconnecting;Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$Disconnecting;
	public fun equals (Ljava/lang/Object;)Z
	public fun getAsDeviceState ()Lcom/splendo/kaluga/bluetooth/device/ConnectableDeviceState;
	public fun getMockConnectableDeviceManager ()Lcom/splendo/kaluga/test/bluetooth/device/MockConnectableDeviceManager;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/device/MockDeviceState$NotConnectable : com/splendo/kaluga/test/bluetooth/device/MockDeviceState, com/splendo/kaluga/bluetooth/device/NotConnectableDeviceState {
	public static final field INSTANCE Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceState$NotConnectable;
	public fun equals (Ljava/lang/Object;)Z
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockBaseScanner : com/splendo/kaluga/bluetooth/scanner/BaseScanner {
	public fun <init> (ZLcom/splendo/kaluga/bluetooth/scanner/BaseScanner$Settings;Lkotlinx/coroutines/CoroutineScope;Lkotlinx/coroutines/CoroutineDispatcher;Z)V
	public synthetic fun <init> (ZLcom/splendo/kaluga/bluetooth/scanner/BaseScanner$Settings;Lkotlinx/coroutines/CoroutineScope;Lkotlinx/coroutines/CoroutineDispatcher;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public synthetic fun getBluetoothEnabledMonitor ()Lcom/splendo/kaluga/bluetooth/BluetoothMonitor;
	public fun getBluetoothEnabledMonitor ()Lcom/splendo/kaluga/test/bluetooth/MockBluetoothMonitor;
	public final fun getDidStartScanningMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getDidStopScanningMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getGenerateEnableSensorsActionsMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getRetrievePairedDeviceDiscoveredEventsMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getStartMonitoringHardwareEnabledMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getStartMonitoringPermissionsMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getStopMonitoringHardwareEnabledMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getStopMonitoringPermissionsMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public fun handleDeviceDiscovered (Lcom/splendo/kaluga/bluetooth/device/DeviceWrapper;ILcom/splendo/kaluga/bluetooth/device/BaseAdvertisementData;Lkotlin/jvm/functions/Function1;)V
	public final fun isEnabled ()Lkotlinx/coroutines/flow/MutableStateFlow;
	public fun isSupported ()Z
	public fun startMonitoringHardwareEnabled (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun startMonitoringPermissions (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun stopMonitoringHardwareEnabled (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun stopMonitoringPermissions (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockBaseScanner$Builder : com/splendo/kaluga/bluetooth/scanner/BaseScanner$Builder {
	public fun <init> (ZZ)V
	public synthetic fun <init> (ZZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun create (Lcom/splendo/kaluga/bluetooth/scanner/BaseScanner$Settings;Lkotlinx/coroutines/CoroutineScope;Lkotlinx/coroutines/CoroutineDispatcher;)Lcom/splendo/kaluga/bluetooth/scanner/BaseScanner;
	public final fun getCreateMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getCreatedScanners ()Lcom/splendo/kaluga/base/collections/ConcurrentMutableList;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanner : com/splendo/kaluga/bluetooth/scanner/Scanner {
	public fun <init> (ZLkotlinx/coroutines/flow/MutableSharedFlow;Lkotlinx/coroutines/flow/MutableSharedFlow;Lkotlinx/coroutines/flow/MutableSharedFlow;)V
	public fun cancelRetrievingPairedDevices ()V
	public final fun getCancelRetrievingPairedDevicesMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public synthetic fun getConnectionEvents ()Lkotlinx/coroutines/flow/Flow;
	public fun getConnectionEvents ()Lkotlinx/coroutines/flow/MutableSharedFlow;
	public synthetic fun getDiscoveryEvents ()Lkotlinx/coroutines/flow/Flow;
	public fun getDiscoveryEvents ()Lkotlinx/coroutines/flow/MutableSharedFlow;
	public synthetic fun getEvents ()Lkotlinx/coroutines/flow/Flow;
	public fun getEvents ()Lkotlinx/coroutines/flow/MutableSharedFlow;
	public final fun getRequestEnableHardwareMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getRetrievePairedDevicesMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getScanForDevicesMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getStartMonitoringHardwareEnabledMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getStartMonitoringPermissionsMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getStopMonitoringHardwareEnabledMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getStopMonitoringPermissionsMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getStopScanningMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public fun isHardwareEnabled (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun isHardwareEnabledMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public fun isSupported ()Z
	public fun requestEnableHardware (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun retrievePairedDevices (Ljava/util/Set;ZLcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun scanForDevices (Ljava/util/Set;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun startMonitoringHardwareEnabled (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun startMonitoringPermissions (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun stopMonitoringHardwareEnabled (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun stopMonitoringPermissions (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun stopScanning (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState {
	public final fun getNothingFound ()Lcom/splendo/kaluga/bluetooth/scanner/DefaultDevices;
}

public abstract class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Active : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState {
	public fun getDeinitialize ()Lkotlin/jvm/functions/Function1;
	public abstract fun getDevices ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Deinitialized : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Inactive, com/splendo/kaluga/bluetooth/scanner/ScanningState$Deinitialized {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)V
	public final fun component1 ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public final fun copy (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Deinitialized;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Deinitialized;Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Deinitialized;
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun getNothingFound ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun getPreviousDevices ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun getReinitialize ()Lkotlin/jvm/functions/Function1;
	public fun hashCode ()I
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public abstract class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Enabled : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Active {
	protected final fun devicesForPairedDevices (Ljava/util/Map;Ljava/util/Set;Z)Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public final fun getDisable ()Lkotlin/jvm/functions/Function1;
	protected abstract fun getPermittedHandler ()Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$PermittedHandler;
	public final fun getRevokePermission ()Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Enabled$Idle : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Enabled, com/splendo/kaluga/bluetooth/scanner/ScanningState$Enabled$Idle {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)V
	public fun getDevices ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public synthetic fun getNothingFound ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public final fun getRetrievePairedDevicesMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public fun pairedDevices (Ljava/util/Map;Ljava/util/Set;Z)Lkotlin/jvm/functions/Function1;
	public fun refresh (Ljava/util/Set;Lcom/splendo/kaluga/bluetooth/BluetoothService$CleanMode;)Lkotlin/jvm/functions/Function1;
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun retrievePairedDevices (Ljava/util/Set;ZLcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun startScanning (Ljava/util/Set;Lcom/splendo/kaluga/bluetooth/BluetoothService$CleanMode;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;)Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Enabled$Scanning : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Enabled, com/splendo/kaluga/bluetooth/scanner/ScanningState$Enabled$Scanning {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)V
	public fun discoverDevices (Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getDevices ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public synthetic fun getNothingFound ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public final fun getRetrievePairedDevicesMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public fun pairedDevices (Ljava/util/Map;Ljava/util/Set;Z)Lkotlin/jvm/functions/Function1;
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun retrievePairedDevices (Ljava/util/Set;ZLcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun stopScanning (Lcom/splendo/kaluga/bluetooth/BluetoothService$CleanMode;)Lkotlin/jvm/functions/Function1;
}

public abstract class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Inactive : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState {
}

public abstract class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Initialized : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState {
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Initializing : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Active, com/splendo/kaluga/bluetooth/scanner/ScanningState$Initializing {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)V
	public final fun component1 ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public final fun copy (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Initializing;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Initializing;Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Initializing;
	public fun equals (Ljava/lang/Object;)Z
	public fun getDevices ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public synthetic fun getNothingFound ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun hashCode ()I
	public fun initialized (ZZ)Lkotlin/jvm/functions/Function1;
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public abstract class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoBluetooth : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Active {
	public fun getDeinitialize ()Lkotlin/jvm/functions/Function1;
	public fun getDevices ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	protected abstract fun getPreviousDevices ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoBluetooth$Disabled : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoBluetooth, com/splendo/kaluga/bluetooth/scanner/ScanningState$NoBluetooth$Disabled {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)V
	public final fun copy (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoBluetooth$Disabled;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoBluetooth$Disabled;Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoBluetooth$Disabled;
	public fun equals (Ljava/lang/Object;)Z
	public fun getEnable ()Lkotlin/jvm/functions/Function1;
	public synthetic fun getNothingFound ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun getRevokePermission ()Lkotlin/jvm/functions/Function1;
	public fun hashCode ()I
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoBluetooth$MissingPermissions : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoBluetooth, com/splendo/kaluga/bluetooth/scanner/ScanningState$NoBluetooth$MissingPermissions {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)V
	public final fun copy (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoBluetooth$MissingPermissions;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoBluetooth$MissingPermissions;Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoBluetooth$MissingPermissions;
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun getNothingFound ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun hashCode ()I
	public fun permit (Z)Lkotlin/jvm/functions/Function1;
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoHardware : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState, com/splendo/kaluga/bluetooth/scanner/ScanningState$NoHardware {
	public static final field INSTANCE Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoHardware;
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun getNothingFound ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun hashCode ()I
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NotInitialized : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Inactive, com/splendo/kaluga/bluetooth/scanner/ScanningState$NotInitialized {
	public fun <init> (Z)V
	public final fun component1 ()Z
	public final fun copy (Z)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NotInitialized;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NotInitialized;ZILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NotInitialized;
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun getNothingFound ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun hashCode ()I
	public final fun isHardwareSupported ()Z
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public final fun startInitializing ()Lkotlin/jvm/functions/Function0;
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$PermittedHandler {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)V
	public final fun getRevokePermission ()Lkotlin/jvm/functions/Function1;
}

