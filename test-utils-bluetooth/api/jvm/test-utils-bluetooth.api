public abstract interface class com/splendo/kaluga/test/bluetooth/CanUpdateMockValue {
	public abstract fun updateMockValue ([B)V
}

public final class com/splendo/kaluga/test/bluetooth/Jvm_mocksKt {
	public static final fun build (Lcom/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder;)Lcom/splendo/kaluga/bluetooth/ServiceWrapper;
	public static final fun createDeviceWrapper (Ljava/lang/String;Lcom/splendo/kaluga/bluetooth/UUID;)Lcom/splendo/kaluga/bluetooth/device/DeviceWrapper;
	public static synthetic fun createDeviceWrapper$default (Ljava/lang/String;Lcom/splendo/kaluga/bluetooth/UUID;ILjava/lang/Object;)Lcom/splendo/kaluga/bluetooth/device/DeviceWrapper;
	public static final fun randomIdentifier ()Lcom/splendo/kaluga/bluetooth/UUID;
}

public final class com/splendo/kaluga/test/bluetooth/MockBluetoothMonitor : com/splendo/kaluga/test/base/monitor/MockServiceMonitor, com/splendo/kaluga/bluetooth/BluetoothMonitor {
	public fun <init> (Lkotlinx/coroutines/flow/StateFlow;)V
	public synthetic fun isEnabled ()Lkotlinx/coroutines/flow/Flow;
	public fun isEnabled ()Lkotlinx/coroutines/flow/StateFlow;
}

public abstract interface annotation class com/splendo/kaluga/test/bluetooth/MockBuilderDsl : java/lang/annotation/Annotation {
}

public final class com/splendo/kaluga/test/bluetooth/MockCharacteristic : com/splendo/kaluga/bluetooth/Characteristic {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/CharacteristicWrapper;Lkotlin/jvm/functions/Function1;)V
	public final fun getUpdateMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public fun updateValue ()V
}

public abstract interface class com/splendo/kaluga/test/bluetooth/MockCharacteristicWrapper : com/splendo/kaluga/bluetooth/CharacteristicWrapper, com/splendo/kaluga/test/bluetooth/CanUpdateMockValue {
}

public final class com/splendo/kaluga/test/bluetooth/MockDescriptor : com/splendo/kaluga/bluetooth/Descriptor {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/DescriptorWrapper;Lkotlin/jvm/functions/Function1;)V
	public final fun getUpdateMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public fun updateValue ()V
}

public abstract interface class com/splendo/kaluga/test/bluetooth/MockDescriptorWrapper : com/splendo/kaluga/bluetooth/DescriptorWrapper, com/splendo/kaluga/test/bluetooth/CanUpdateMockValue {
}

public final class com/splendo/kaluga/test/bluetooth/MockDeviceInfoBuilder {
	public fun <init> ()V
	public final fun build ()Lcom/splendo/kaluga/bluetooth/device/DeviceInfoImpl;
	public final fun getDeviceName ()Ljava/lang/String;
	public final fun getIdentifier ()Lcom/splendo/kaluga/bluetooth/UUID;
	public final fun getManufacturerData ()[B
	public final fun getManufacturerId ()Ljava/lang/Integer;
	public final fun getRssi ()I
	public final fun getServiceData ()Ljava/util/Map;
	public final fun getTxPowerLevel ()I
	public final fun services (Lkotlin/jvm/functions/Function1;)V
	public final fun setDeviceName (Ljava/lang/String;)V
	public final fun setIdentifier (Lcom/splendo/kaluga/bluetooth/UUID;)V
	public final fun setManufacturerData ([B)V
	public final fun setManufacturerId (Ljava/lang/Integer;)V
	public final fun setRssi (I)V
	public final fun setServiceData (Ljava/util/Map;)V
	public final fun setTxPowerLevel (I)V
}

public final class com/splendo/kaluga/test/bluetooth/MockDeviceInfoBuilderKt {
	public static final fun createMockDevice (Lcom/splendo/kaluga/bluetooth/UUID;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function2;Lkotlinx/coroutines/CoroutineScope;)Lcom/splendo/kaluga/bluetooth/device/DeviceImpl;
	public static final fun createMockDevice (Lcom/splendo/kaluga/bluetooth/device/DeviceWrapper;Lkotlinx/coroutines/CoroutineScope;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceConnectionManager$Builder;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function1;)Lcom/splendo/kaluga/bluetooth/device/DeviceImpl;
	public static synthetic fun createMockDevice$default (Lcom/splendo/kaluga/bluetooth/UUID;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function2;Lkotlinx/coroutines/CoroutineScope;ILjava/lang/Object;)Lcom/splendo/kaluga/bluetooth/device/DeviceImpl;
	public static synthetic fun createMockDevice$default (Lcom/splendo/kaluga/bluetooth/device/DeviceWrapper;Lkotlinx/coroutines/CoroutineScope;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lcom/splendo/kaluga/test/bluetooth/device/MockDeviceConnectionManager$Builder;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lcom/splendo/kaluga/bluetooth/device/DeviceImpl;
	public static final fun uuid (Ljava/util/ArrayList;Ljava/lang/String;)Z
}

public final class com/splendo/kaluga/test/bluetooth/MockDeviceWrapper : com/splendo/kaluga/bluetooth/device/DeviceWrapper {
	public fun <init> (Ljava/lang/String;Lcom/splendo/kaluga/bluetooth/UUID;)V
	public fun getIdentifier ()Lcom/splendo/kaluga/bluetooth/UUID;
	public fun getName ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/MocksKt {
	public static final fun createServiceWrapper (Lkotlin/jvm/functions/Function1;)Lcom/splendo/kaluga/bluetooth/ServiceWrapper;
}

public final class com/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder {
	public fun <init> ()V
	public final fun characteristics (Lkotlin/jvm/functions/Function1;)V
	public final fun getCharacteristics ()Ljava/util/List;
	public final fun getUuid ()Lcom/splendo/kaluga/bluetooth/UUID;
	public final fun setUuid (Lcom/splendo/kaluga/bluetooth/UUID;)V
}

public final class com/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Characteristic {
	public fun <init> ()V
	public fun <init> (Lcom/splendo/kaluga/bluetooth/UUID;Ljava/util/List;I)V
	public synthetic fun <init> (Lcom/splendo/kaluga/bluetooth/UUID;Ljava/util/List;IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lcom/splendo/kaluga/bluetooth/UUID;
	public final fun component2 ()Ljava/util/List;
	public final fun component3 ()I
	public final fun copy (Lcom/splendo/kaluga/bluetooth/UUID;Ljava/util/List;I)Lcom/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Characteristic;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Characteristic;Lcom/splendo/kaluga/bluetooth/UUID;Ljava/util/List;IILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Characteristic;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDescriptorUUIDs ()Ljava/util/List;
	public final fun getDescriptors ()Ljava/util/List;
	public final fun getProperties ()I
	public final fun getUuid ()Lcom/splendo/kaluga/bluetooth/UUID;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Characteristic$Builder {
	public fun <init> ()V
	public final fun build ()Lcom/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Characteristic;
	public final fun descriptors (Lkotlin/jvm/functions/Function1;)V
	public final fun getDescriptors ()Ljava/util/List;
	public final fun getProperties ()I
	public final fun getUuid ()Lcom/splendo/kaluga/bluetooth/UUID;
	public final fun setProperties (I)V
	public final fun setUuid (Lcom/splendo/kaluga/bluetooth/UUID;)V
}

public final class com/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Descriptor {
	public fun <init> ()V
	public fun <init> (Lcom/splendo/kaluga/bluetooth/UUID;)V
	public synthetic fun <init> (Lcom/splendo/kaluga/bluetooth/UUID;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lcom/splendo/kaluga/bluetooth/UUID;
	public final fun copy (Lcom/splendo/kaluga/bluetooth/UUID;)Lcom/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Descriptor;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Descriptor;Lcom/splendo/kaluga/bluetooth/UUID;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/ServiceWrapperBuilder$Descriptor;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getUuid ()Lcom/splendo/kaluga/bluetooth/UUID;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/ServiceWrapperBuilderKt {
	public static final fun characteristic (Ljava/util/ArrayList;Lkotlin/jvm/functions/Function1;)Z
	public static final fun descriptor (Ljava/util/ArrayList;Lcom/splendo/kaluga/bluetooth/UUID;)Z
}

public final class com/splendo/kaluga/test/bluetooth/device/MockAdvertisementData : com/splendo/kaluga/bluetooth/device/BaseAdvertisementData {
	public fun <init> ()V
	public fun <init> (Ljava/lang/String;Ljava/lang/Integer;[BLjava/util/List;Ljava/util/Map;IZ)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/Integer;[BLjava/util/List;Ljava/util/Map;IZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/Integer;
	public final fun component3 ()[B
	public final fun component4 ()Ljava/util/List;
	public final fun component5 ()Ljava/util/Map;
	public final fun component6 ()I
	public final fun component7 ()Z
	public final fun copy (Ljava/lang/String;Ljava/lang/Integer;[BLjava/util/List;Ljava/util/Map;IZ)Lcom/splendo/kaluga/test/bluetooth/device/MockAdvertisementData;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/device/MockAdvertisementData;Ljava/lang/String;Ljava/lang/Integer;[BLjava/util/List;Ljava/util/Map;IZILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/device/MockAdvertisementData;
	public fun equals (Ljava/lang/Object;)Z
	public fun getManufacturerData ()[B
	public fun getManufacturerId ()Ljava/lang/Integer;
	public fun getName ()Ljava/lang/String;
	public fun getServiceData ()Ljava/util/Map;
	public fun getServiceUUIDs ()Ljava/util/List;
	public fun getTxPowerLevel ()I
	public fun hashCode ()I
	public fun isConnectable ()Z
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/device/MockDeviceConnectionManager : com/splendo/kaluga/bluetooth/device/BaseDeviceConnectionManager {
	public fun <init> (ZLcom/splendo/kaluga/bluetooth/device/DeviceWrapper;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlinx/coroutines/CoroutineScope;Z)V
	public synthetic fun <init> (ZLcom/splendo/kaluga/bluetooth/device/DeviceWrapper;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlinx/coroutines/CoroutineScope;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun connect (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun disconnect (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun discoverServices (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun getConnectMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public fun getCurrentState ()Lcom/splendo/kaluga/bluetooth/device/DeviceConnectionManager$State;
	public final fun getDisconnectMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getDiscoverServicesMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getGetCurrentStateMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getHandleCurrentActionCompletedMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getPairMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getPerformActionMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getReadRssiMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getRequestMtuMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getUnpairMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getWillActionSucceed ()Z
	public final fun handleCurrentAction (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun handleCurrentActionCompleted (Z)V
	public fun pair (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun performAction (Lcom/splendo/kaluga/bluetooth/device/DeviceAction;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun readRssi (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun requestMtu (ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun setWillActionSucceed (Z)V
	public fun unpair (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/splendo/kaluga/test/bluetooth/device/MockDeviceConnectionManager$Builder : com/splendo/kaluga/bluetooth/device/BaseDeviceConnectionManager$Builder {
	public fun <init> ()V
	public fun <init> (ZZ)V
	public synthetic fun <init> (ZZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun create (Lcom/splendo/kaluga/bluetooth/device/DeviceWrapper;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lkotlinx/coroutines/CoroutineScope;)Lcom/splendo/kaluga/bluetooth/device/BaseDeviceConnectionManager;
	public final fun getCreateMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getCreatedDeviceConnectionManager ()Lco/touchlab/stately/collections/IsoMutableList;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockBaseScanner : com/splendo/kaluga/bluetooth/scanner/BaseScanner {
	public fun <init> (ZLcom/splendo/kaluga/bluetooth/scanner/BaseScanner$Settings;Lkotlinx/coroutines/CoroutineScope;Z)V
	public synthetic fun <init> (ZLcom/splendo/kaluga/bluetooth/scanner/BaseScanner$Settings;Lkotlinx/coroutines/CoroutineScope;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun generateEnableSensorsActions ()Ljava/util/List;
	public synthetic fun getBluetoothEnabledMonitor ()Lcom/splendo/kaluga/bluetooth/BluetoothMonitor;
	public fun getBluetoothEnabledMonitor ()Lcom/splendo/kaluga/test/bluetooth/MockBluetoothMonitor;
	public final fun getDidStartScanningMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getDidStopScanningMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getGenerateEnableSensorsActionsMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getRetrievePairedDevicesMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getStartMonitoringHardwareEnabledMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getStartMonitoringPermissionsMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getStopMonitoringHardwareEnabledMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getStopMonitoringPermissionsMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun isEnabled ()Lkotlinx/coroutines/flow/MutableStateFlow;
	public fun isSupported ()Z
	public fun retrievePairedDevices (Ljava/util/Set;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun startMonitoringHardwareEnabled ()V
	public fun startMonitoringPermissions ()V
	public fun stopMonitoringHardwareEnabled ()V
	public fun stopMonitoringPermissions ()V
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockBaseScanner$Builder : com/splendo/kaluga/bluetooth/scanner/BaseScanner$Builder {
	public fun <init> (ZZ)V
	public synthetic fun <init> (ZZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun create (Lcom/splendo/kaluga/bluetooth/scanner/BaseScanner$Settings;Lkotlinx/coroutines/CoroutineScope;)Lcom/splendo/kaluga/bluetooth/scanner/BaseScanner;
	public final fun getCreateMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getCreatedScanners ()Lco/touchlab/stately/collections/IsoMutableList;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanner : com/splendo/kaluga/bluetooth/scanner/Scanner {
	public fun <init> (ZLkotlinx/coroutines/flow/MutableSharedFlow;)V
	public fun generateEnableSensorsActions ()Ljava/util/List;
	public synthetic fun getEvents ()Lkotlinx/coroutines/flow/Flow;
	public fun getEvents ()Lkotlinx/coroutines/flow/MutableSharedFlow;
	public final fun getGenerateEnableSensorsActionsMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getRequestEnableHardwareMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getRetrievePairedDevicesMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getScanForDevicesMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public final fun getStartMonitoringHardwareEnabledMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getStartMonitoringPermissionsMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getStopMonitoringHardwareEnabledMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getStopMonitoringPermissionsMock ()Lcom/splendo/kaluga/test/base/mock/MethodMock;
	public final fun getStopScanningMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public fun isHardwareEnabled (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun isHardwareEnabledMock ()Lcom/splendo/kaluga/test/base/mock/SuspendMethodMock;
	public fun isSupported ()Z
	public fun requestEnableHardware (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun retrievePairedDevices (Ljava/util/Set;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun scanForDevices (Ljava/util/Set;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun startMonitoringHardwareEnabled ()V
	public fun startMonitoringPermissions ()V
	public fun stopMonitoringHardwareEnabled ()V
	public fun stopMonitoringPermissions ()V
	public fun stopScanning (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState {
	public static final field Companion Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Companion;
}

public abstract class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Active : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState {
	public final fun getDeinitialize ()Lkotlin/jvm/functions/Function1;
	public abstract fun getDiscovered ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public abstract fun getPaired ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Companion {
	public final fun getNothingFound ()Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Devices;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Deinitialized : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Inactive, com/splendo/kaluga/bluetooth/scanner/ScanningState$Deinitialized {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)V
	public final fun component1 ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public final fun component2 ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public final fun copy (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Deinitialized;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Deinitialized;Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Deinitialized;
	public fun equals (Ljava/lang/Object;)Z
	public fun finalState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getPreviouslyDiscovered ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun getPreviouslyPaired ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun getReinitialize ()Lkotlin/jvm/functions/Function1;
	public fun hashCode ()I
	public fun initialState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Devices : com/splendo/kaluga/bluetooth/scanner/ScanningState$Devices {
	public fun <init> (Ljava/util/List;Ljava/util/Set;)V
	public fun <init> (Ljava/util/Set;)V
	public final fun component1 ()Ljava/util/List;
	public final fun component2 ()Ljava/util/Set;
	public final fun copy (Ljava/util/List;Ljava/util/Set;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Devices;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Devices;Ljava/util/List;Ljava/util/Set;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Devices;
	public synthetic fun copyAndAdd (Lcom/splendo/kaluga/bluetooth/device/Device;)Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun copyAndAdd (Lcom/splendo/kaluga/bluetooth/device/Device;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Devices;
	public fun equals (Ljava/lang/Object;)Z
	public synthetic fun foundForFilter (Ljava/util/Set;)Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun foundForFilter (Ljava/util/Set;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Devices;
	public fun getDevices ()Ljava/util/List;
	public fun getFilter ()Ljava/util/Set;
	public fun hashCode ()I
	public fun identifiers ()Ljava/util/Set;
	public fun toString ()Ljava/lang/String;
}

public abstract class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Enabled : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Active {
	public final fun getDisable ()Lkotlin/jvm/functions/Function1;
	protected abstract fun getPermittedHandler ()Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$PermittedHandler;
	public final fun getRevokePermission ()Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Enabled$Idle : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Enabled, com/splendo/kaluga/bluetooth/scanner/ScanningState$Enabled$Idle {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)V
	public fun finalState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getDiscovered ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun getPaired ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun initialState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun pairedDevices (Ljava/util/Set;Ljava/util/Set;Ljava/util/List;)Lkotlin/jvm/functions/Function1;
	public fun refresh (Ljava/util/Set;)Lkotlin/jvm/functions/Function1;
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun retrievePairedDevices (Ljava/util/Set;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun startScanning (Ljava/util/Set;)Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Enabled$Scanning : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Enabled, com/splendo/kaluga/bluetooth/scanner/ScanningState$Enabled$Scanning {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)V
	public fun discoverDevice (Lcom/splendo/kaluga/bluetooth/UUID;ILcom/splendo/kaluga/bluetooth/device/BaseAdvertisementData;Lkotlin/jvm/functions/Function0;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun finalState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getDiscovered ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun getPaired ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun getStopScanning ()Lkotlin/jvm/functions/Function1;
	public fun initialState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun pairedDevices (Ljava/util/Set;Ljava/util/Set;Ljava/util/List;)Lkotlin/jvm/functions/Function1;
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun retrievePairedDevices (Ljava/util/Set;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Inactive : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState {
}

public abstract class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Initialized : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState {
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Initializing : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Active, com/splendo/kaluga/bluetooth/scanner/ScanningState$Initializing {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)V
	public final fun component1 ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public final fun component2 ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public final fun copy (Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Initializing;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Initializing;Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;ILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Initializing;
	public fun equals (Ljava/lang/Object;)Z
	public fun finalState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getDiscovered ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun getPaired ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun hashCode ()I
	public fun initialState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun initialized (ZZ)Lkotlin/jvm/functions/Function1;
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public fun toString ()Ljava/lang/String;
}

public abstract class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoBluetooth : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Active {
	public synthetic fun getDiscovered ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun getDiscovered ()Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Devices;
	public synthetic fun getPaired ()Lcom/splendo/kaluga/bluetooth/scanner/ScanningState$Devices;
	public fun getPaired ()Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Devices;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoBluetooth$Disabled : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoBluetooth, com/splendo/kaluga/bluetooth/scanner/ScanningState$NoBluetooth$Disabled {
	public fun <init> ()V
	public fun finalState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getEnable ()Lkotlin/jvm/functions/Function1;
	public fun getRevokePermission ()Lkotlin/jvm/functions/Function1;
	public fun initialState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun remain ()Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoBluetooth$MissingPermissions : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoBluetooth, com/splendo/kaluga/bluetooth/scanner/ScanningState$NoBluetooth$MissingPermissions {
	public fun <init> ()V
	public fun finalState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun initialState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun permit (Z)Lkotlin/jvm/functions/Function1;
	public fun remain ()Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoHardware : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState, com/splendo/kaluga/bluetooth/scanner/ScanningState$NoHardware {
	public static final field INSTANCE Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NoHardware;
	public fun finalState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun initialState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun remain ()Lkotlin/jvm/functions/Function1;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NotInitialized : com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$Inactive, com/splendo/kaluga/bluetooth/scanner/ScanningState$NotInitialized {
	public fun <init> (Z)V
	public final fun component1 ()Z
	public final fun copy (Z)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NotInitialized;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NotInitialized;ZILjava/lang/Object;)Lcom/splendo/kaluga/test/bluetooth/scanner/MockScanningState$NotInitialized;
	public fun equals (Ljava/lang/Object;)Z
	public fun finalState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun hashCode ()I
	public fun initialState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun isHardwareSupported ()Z
	public fun remain ()Lkotlin/jvm/functions/Function1;
	public final fun startInitializing ()Lkotlin/jvm/functions/Function0;
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/bluetooth/scanner/MockScanningState$PermittedHandler {
	public fun <init> ()V
	public final fun getRevokePermission ()Lkotlin/jvm/functions/Function1;
}

