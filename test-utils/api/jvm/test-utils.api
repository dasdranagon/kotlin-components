public final class com/splendo/kaluga/test/AssertionsKt {
	public static final fun assertFrozen (Ljava/lang/Object;Ljava/lang/String;Z)V
	public static synthetic fun assertFrozen$default (Ljava/lang/Object;Ljava/lang/String;ZILjava/lang/Object;)V
	public static final fun assertNotFrozen (Ljava/lang/Object;Ljava/lang/String;Z)V
	public static synthetic fun assertNotFrozen$default (Ljava/lang/Object;Ljava/lang/String;ZILjava/lang/Object;)V
}

public final class com/splendo/kaluga/test/AwaitAllBlockingKt {
	public static final fun awaitAllBlocking ([Lkotlinx/coroutines/Deferred;)Ljava/util/List;
}

public abstract class com/splendo/kaluga/test/BaseFlowTest : com/splendo/kaluga/test/UIThreadTest, kotlinx/coroutines/CoroutineScope {
	public fun <init> ()V
	public fun <init> (Lkotlinx/coroutines/CoroutineScope;)V
	public synthetic fun <init> (Lkotlinx/coroutines/CoroutineScope;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun action (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun afterTest ()V
	public fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getFilter ()Lkotlin/jvm/functions/Function1;
	public final fun getFirstTestBlock ()Z
	public abstract fun getFlowFromTestContext ()Lkotlin/jvm/functions/Function2;
	public final fun getJob ()Lkotlinx/coroutines/Job;
	public final fun getScope ()Lkotlinx/coroutines/CoroutineScope;
	protected final fun getWaitForTestToSucceed ()J
	public final fun mainAction (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun resetFlow (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun setFirstTestBlock (Z)V
	public final fun setJob (Lkotlinx/coroutines/Job;)V
	public final fun test (ILkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static synthetic fun test$default (Lcom/splendo/kaluga/test/BaseFlowTest;ILkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;ILjava/lang/Object;)Ljava/lang/Object;
	public final fun testWithFlowAndTestContext (ZZLkotlin/jvm/functions/Function3;)V
	public static synthetic fun testWithFlowAndTestContext$default (Lcom/splendo/kaluga/test/BaseFlowTest;ZZLkotlin/jvm/functions/Function3;ILjava/lang/Object;)V
}

public abstract class com/splendo/kaluga/test/BaseKoinFlowTest : com/splendo/kaluga/test/BaseFlowTest {
	public fun <init> ()V
}

public class com/splendo/kaluga/test/BaseTest {
	public fun <init> ()V
	public fun afterTest ()V
	public fun beforeTest ()V
}

public final class com/splendo/kaluga/test/DeliberateCancellationException : java/util/concurrent/CancellationException {
	public fun <init> (Ljava/lang/Object;Z)V
	public final fun getResult ()Ljava/lang/Object;
}

public final class com/splendo/kaluga/test/FlowExtensionsKt {
	public static final fun captureFor-8Mi8wO0 (Lkotlinx/coroutines/flow/Flow;JLkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract class com/splendo/kaluga/test/FlowTest : com/splendo/kaluga/test/BaseFlowTest {
	public fun <init> ()V
	public fun <init> (Lkotlinx/coroutines/CoroutineScope;)V
	public synthetic fun <init> (Lkotlinx/coroutines/CoroutineScope;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun getCreateTestContext ()Lkotlin/jvm/functions/Function2;
	public abstract fun getFlow ()Lkotlin/jvm/functions/Function1;
	public fun getFlowFromTestContext ()Lkotlin/jvm/functions/Function2;
	public final fun testWithFlow (Lkotlin/jvm/functions/Function3;)V
}

public final class com/splendo/kaluga/test/FlowTestKt {
	public static final fun getContextMap ()Ljava/util/Map;
}

public abstract class com/splendo/kaluga/test/FlowableTest : com/splendo/kaluga/test/BaseTest {
	public fun <init> ()V
	public abstract fun mutableSharedFlow ()Lkotlinx/coroutines/flow/MutableSharedFlow;
	public final fun testWithFlow (Lkotlin/jvm/functions/Function3;)V
}

public final class com/splendo/kaluga/test/MockPermissionManager : com/splendo/kaluga/permissions/PermissionManager {
	public fun <init> (Lcom/splendo/kaluga/permissions/PermissionStateRepo;)V
	public final fun getCurrentState ()Lcom/splendo/kaluga/permissions/PermissionState;
	public final fun getHasRequestedPermission ()Lkotlinx/coroutines/CompletableDeferred;
	public final fun getHasStartedMonitoring ()Lkotlinx/coroutines/CompletableDeferred;
	public final fun getHasStoppedMonitoring ()Lkotlinx/coroutines/CompletableDeferred;
	public fun initializeState (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun requestPermission (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun setCurrentState (Lcom/splendo/kaluga/permissions/PermissionState;)V
	public final fun setPermissionAllowed ()V
	public final fun setPermissionDenied ()V
	public final fun setPermissionLocked ()V
	public fun startMonitoring (JLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun stopMonitoring (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/splendo/kaluga/test/MockPermissionStateRepo : com/splendo/kaluga/permissions/PermissionStateRepo {
	public fun <init> ()V
	public synthetic fun getPermissionManager ()Lcom/splendo/kaluga/permissions/PermissionManager;
	public fun getPermissionManager ()Lcom/splendo/kaluga/test/MockPermissionManager;
}

public abstract class com/splendo/kaluga/test/SimpleFlowTest : com/splendo/kaluga/test/FlowTest {
	public fun <init> ()V
	public fun <init> (Lkotlinx/coroutines/CoroutineScope;)V
	public synthetic fun <init> (Lkotlinx/coroutines/CoroutineScope;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public class com/splendo/kaluga/test/SimpleUIThreadTest : com/splendo/kaluga/test/UIThreadTest {
	public fun <init> ()V
	public fun getCreateTestContext ()Lkotlin/jvm/functions/Function2;
}

public final class com/splendo/kaluga/test/SimpleUIThreadTest$SimpleTestContext : com/splendo/kaluga/test/UIThreadTest$TestContext, kotlinx/coroutines/CoroutineScope {
	public fun <init> (Lkotlinx/coroutines/CoroutineScope;)V
	public fun dispose ()V
	public fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
}

public abstract class com/splendo/kaluga/test/UIThreadTest : com/splendo/kaluga/test/BaseTest {
	public fun <init> ()V
	public fun <init> (Z)V
	public synthetic fun <init> (ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public abstract fun getCreateTestContext ()Lkotlin/jvm/functions/Function2;
	public final fun testOnUIThread (ZLkotlin/jvm/functions/Function2;)V
	public static synthetic fun testOnUIThread$default (Lcom/splendo/kaluga/test/UIThreadTest;ZLkotlin/jvm/functions/Function2;ILjava/lang/Object;)V
}

public final class com/splendo/kaluga/test/UIThreadTest$EmptyTestContext : com/splendo/kaluga/test/UIThreadTest$TestContext {
	public static final field Companion Lcom/splendo/kaluga/test/UIThreadTest$EmptyTestContext$Companion;
	public fun dispose ()V
}

public final class com/splendo/kaluga/test/UIThreadTest$EmptyTestContext$Companion {
	public final fun getINSTANCE ()Lcom/splendo/kaluga/test/UIThreadTest$EmptyTestContext;
}

public abstract interface class com/splendo/kaluga/test/UIThreadTest$TestContext {
	public abstract fun dispose ()V
}

public final class com/splendo/kaluga/test/UIThreadTest$TestContext$DefaultImpls {
	public static fun dispose (Lcom/splendo/kaluga/test/UIThreadTest$TestContext;)V
}

public abstract class com/splendo/kaluga/test/architecture/SimpleUIThreadViewModelTest : com/splendo/kaluga/test/architecture/UIThreadViewModelTest {
	public fun <init> ()V
	public abstract fun createViewModel ()Lcom/splendo/kaluga/architecture/viewmodel/LifecycleViewModel;
	public fun getCreateTestContext ()Lkotlin/jvm/functions/Function2;
}

public abstract class com/splendo/kaluga/test/architecture/UIThreadViewModelTest : com/splendo/kaluga/test/UIThreadTest {
	public fun <init> ()V
	public fun <init> (Z)V
	public synthetic fun <init> (ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public class com/splendo/kaluga/test/architecture/UIThreadViewModelTest$LazyViewModelTestContext : com/splendo/kaluga/test/architecture/UIThreadViewModelTest$ViewModelTestContext, kotlinx/coroutines/CoroutineScope {
	public fun <init> (Lkotlinx/coroutines/CoroutineScope;Lkotlin/jvm/functions/Function0;)V
	public fun dispose ()V
	public fun getCoroutineContext ()Lkotlin/coroutines/CoroutineContext;
	public fun getViewModel ()Ljava/lang/Object;
}

public abstract interface class com/splendo/kaluga/test/architecture/UIThreadViewModelTest$ViewModelTestContext : com/splendo/kaluga/test/UIThreadTest$TestContext {
	public abstract fun getViewModel ()Ljava/lang/Object;
}

public final class com/splendo/kaluga/test/architecture/UIThreadViewModelTest$ViewModelTestContext$DefaultImpls {
	public static fun dispose (Lcom/splendo/kaluga/test/architecture/UIThreadViewModelTest$ViewModelTestContext;)V
}

public abstract class com/splendo/kaluga/test/architecture/ViewModelTest : com/splendo/kaluga/test/BaseTest {
	public field viewModel Lcom/splendo/kaluga/architecture/viewmodel/LifecycleViewModel;
	public fun <init> ()V
	public fun <init> (Z)V
	public synthetic fun <init> (ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun beforeTest ()V
	protected abstract fun createViewModel ()Lcom/splendo/kaluga/architecture/viewmodel/LifecycleViewModel;
	public final fun getViewModel ()Lcom/splendo/kaluga/architecture/viewmodel/LifecycleViewModel;
	public final fun setViewModel (Lcom/splendo/kaluga/architecture/viewmodel/LifecycleViewModel;)V
}

public abstract class com/splendo/kaluga/test/architecture/koin/KoinUIThreadViewModelTest : com/splendo/kaluga/test/koin/KoinUIThreadTest {
	public fun <init> ()V
	public fun <init> (Z)V
	public synthetic fun <init> (ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public abstract class com/splendo/kaluga/test/architecture/koin/KoinUIThreadViewModelTest$KoinViewModelTestContext : com/splendo/kaluga/test/koin/KoinUIThreadTest$KoinTestContext, com/splendo/kaluga/test/architecture/UIThreadViewModelTest$ViewModelTestContext {
	public fun <init> (Lkotlin/jvm/functions/Function1;Ljava/util/List;)V
	public synthetic fun <init> (Lkotlin/jvm/functions/Function1;Ljava/util/List;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> (Lkotlin/jvm/functions/Function1;[Lorg/koin/core/module/Module;)V
	public fun <init> ([Lorg/koin/core/module/Module;)V
}

public abstract class com/splendo/kaluga/test/koin/KoinUIThreadTest : com/splendo/kaluga/test/UIThreadTest {
	public fun <init> ()V
	public fun <init> (Z)V
	public synthetic fun <init> (ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
}

public class com/splendo/kaluga/test/koin/KoinUIThreadTest$KoinTestContext : com/splendo/kaluga/test/UIThreadTest$TestContext, org/koin/core/component/KoinComponent {
	public fun <init> (Lkotlin/jvm/functions/Function1;Ljava/util/List;)V
	public synthetic fun <init> (Lkotlin/jvm/functions/Function1;Ljava/util/List;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> (Lkotlin/jvm/functions/Function1;[Lorg/koin/core/module/Module;)V
	public fun <init> ([Lorg/koin/core/module/Module;)V
	public fun dispose ()V
	public fun getKoin ()Lorg/koin/core/Koin;
}

public final class com/splendo/kaluga/test/mock/alerts/MockAlertPresenter : com/splendo/kaluga/alerts/BaseAlertPresenter {
	public fun <init> (Lcom/splendo/kaluga/alerts/Alert;)V
	public final fun closeWithAction (Lcom/splendo/kaluga/alerts/Alert$Action;)V
	public final fun getAlert ()Lcom/splendo/kaluga/alerts/Alert;
	public final fun isPresented ()Z
}

public final class com/splendo/kaluga/test/mock/alerts/MockAlertPresenter$Builder : com/splendo/kaluga/alerts/BaseAlertPresenter$Builder {
	public fun <init> ()V
	public synthetic fun create (Lkotlinx/coroutines/CoroutineScope;)Lcom/splendo/kaluga/alerts/BaseAlertPresenter;
	public fun create (Lkotlinx/coroutines/CoroutineScope;)Lcom/splendo/kaluga/test/mock/alerts/MockAlertPresenter;
	public final fun getBuiltAlerts ()Ljava/util/List;
}

public abstract class com/splendo/kaluga/test/mock/architecture/MockNavigator : com/splendo/kaluga/architecture/navigation/Navigator {
	public fun <init> ()V
}

public abstract interface class com/splendo/kaluga/test/mock/bluetooth/CanUpdateMockValue {
	public abstract fun updateMockValue ([B)V
}

public final class com/splendo/kaluga/test/mock/bluetooth/Jvm_mocksKt {
	public static final fun build (Lcom/splendo/kaluga/test/mock/bluetooth/ServiceWrapperBuilder;)Lcom/splendo/kaluga/bluetooth/ServiceWrapper;
	public static final fun createDeviceWrapper (Ljava/lang/String;)Lcom/splendo/kaluga/bluetooth/device/DeviceWrapper;
	public static synthetic fun createDeviceWrapper$default (Ljava/lang/String;ILjava/lang/Object;)Lcom/splendo/kaluga/bluetooth/device/DeviceWrapper;
}

public abstract interface annotation class com/splendo/kaluga/test/mock/bluetooth/MockBuilderDsl : java/lang/annotation/Annotation {
}

public final class com/splendo/kaluga/test/mock/bluetooth/MockCharacteristic : com/splendo/kaluga/bluetooth/Characteristic {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/CharacteristicWrapper;Lcom/splendo/kaluga/state/StateRepo;)V
	public final fun getDidUpdate ()Lkotlinx/coroutines/CompletableDeferred;
	public fun updateValue (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class com/splendo/kaluga/test/mock/bluetooth/MockCharacteristicWrapper : com/splendo/kaluga/bluetooth/CharacteristicWrapper, com/splendo/kaluga/test/mock/bluetooth/CanUpdateMockValue {
}

public abstract interface class com/splendo/kaluga/test/mock/bluetooth/MockDescriptorWrapper : com/splendo/kaluga/bluetooth/DescriptorWrapper, com/splendo/kaluga/test/mock/bluetooth/CanUpdateMockValue {
}

public final class com/splendo/kaluga/test/mock/bluetooth/MockDeviceInfoBuilder {
	public fun <init> ()V
	public final fun build ()Lcom/splendo/kaluga/bluetooth/device/DeviceInfoImpl;
	public final fun getDeviceName ()Ljava/lang/String;
	public final fun getManufacturerData ()[B
	public final fun getManufacturerId ()Ljava/lang/Integer;
	public final fun getRssi ()I
	public final fun getServiceData ()Ljava/util/Map;
	public final fun getTxPowerLevel ()I
	public final fun services (Lkotlin/jvm/functions/Function1;)V
	public final fun setDeviceName (Ljava/lang/String;)V
	public final fun setManufacturerData ([B)V
	public final fun setManufacturerId (Ljava/lang/Integer;)V
	public final fun setRssi (I)V
	public final fun setServiceData (Ljava/util/Map;)V
	public final fun setTxPowerLevel (I)V
}

public final class com/splendo/kaluga/test/mock/bluetooth/MockDeviceInfoBuilderKt {
	public static final fun createMockDevice (Lkotlin/coroutines/CoroutineContext;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lcom/splendo/kaluga/bluetooth/device/BaseDeviceConnectionManager$Builder;Lkotlin/jvm/functions/Function1;)Lcom/splendo/kaluga/bluetooth/device/Device;
	public static synthetic fun createMockDevice$default (Lkotlin/coroutines/CoroutineContext;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lcom/splendo/kaluga/bluetooth/device/BaseDeviceConnectionManager$Builder;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lcom/splendo/kaluga/bluetooth/device/Device;
	public static final fun uuid (Ljava/util/ArrayList;Ljava/lang/String;)Z
}

public final class com/splendo/kaluga/test/mock/bluetooth/MockDeviceWrapper : com/splendo/kaluga/bluetooth/device/DeviceWrapper {
	public fun <init> (Ljava/lang/String;Lcom/splendo/kaluga/bluetooth/UUID;)V
	public fun getIdentifier ()Lcom/splendo/kaluga/bluetooth/UUID;
	public fun getName ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/mock/bluetooth/MocksKt {
	public static final fun createServiceWrapper (Lkotlin/jvm/functions/Function1;)Lcom/splendo/kaluga/bluetooth/ServiceWrapper;
}

public final class com/splendo/kaluga/test/mock/bluetooth/ServiceWrapperBuilder {
	public fun <init> ()V
	public final fun characteristics (Lkotlin/jvm/functions/Function1;)V
	public final fun getCharacteristics ()Ljava/util/List;
	public final fun getUuid ()Lcom/splendo/kaluga/bluetooth/UUID;
	public final fun setUuid (Lcom/splendo/kaluga/bluetooth/UUID;)V
}

public final class com/splendo/kaluga/test/mock/bluetooth/ServiceWrapperBuilder$Characteristic {
	public fun <init> ()V
	public fun <init> (Lcom/splendo/kaluga/bluetooth/UUID;Ljava/util/List;I)V
	public synthetic fun <init> (Lcom/splendo/kaluga/bluetooth/UUID;Ljava/util/List;IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lcom/splendo/kaluga/bluetooth/UUID;
	public final fun component2 ()Ljava/util/List;
	public final fun component3 ()I
	public final fun copy (Lcom/splendo/kaluga/bluetooth/UUID;Ljava/util/List;I)Lcom/splendo/kaluga/test/mock/bluetooth/ServiceWrapperBuilder$Characteristic;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/mock/bluetooth/ServiceWrapperBuilder$Characteristic;Lcom/splendo/kaluga/bluetooth/UUID;Ljava/util/List;IILjava/lang/Object;)Lcom/splendo/kaluga/test/mock/bluetooth/ServiceWrapperBuilder$Characteristic;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDescriptorUUIDs ()Ljava/util/List;
	public final fun getDescriptors ()Ljava/util/List;
	public final fun getProperties ()I
	public final fun getUuid ()Lcom/splendo/kaluga/bluetooth/UUID;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/mock/bluetooth/ServiceWrapperBuilder$Characteristic$Builder {
	public fun <init> ()V
	public final fun build ()Lcom/splendo/kaluga/test/mock/bluetooth/ServiceWrapperBuilder$Characteristic;
	public final fun descriptors (Lkotlin/jvm/functions/Function1;)V
	public final fun getDescriptors ()Ljava/util/List;
	public final fun getProperties ()I
	public final fun getUuid ()Lcom/splendo/kaluga/bluetooth/UUID;
	public final fun setProperties (I)V
	public final fun setUuid (Lcom/splendo/kaluga/bluetooth/UUID;)V
}

public final class com/splendo/kaluga/test/mock/bluetooth/ServiceWrapperBuilder$Descriptor {
	public fun <init> ()V
	public fun <init> (Lcom/splendo/kaluga/bluetooth/UUID;)V
	public synthetic fun <init> (Lcom/splendo/kaluga/bluetooth/UUID;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lcom/splendo/kaluga/bluetooth/UUID;
	public final fun copy (Lcom/splendo/kaluga/bluetooth/UUID;)Lcom/splendo/kaluga/test/mock/bluetooth/ServiceWrapperBuilder$Descriptor;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/mock/bluetooth/ServiceWrapperBuilder$Descriptor;Lcom/splendo/kaluga/bluetooth/UUID;ILjava/lang/Object;)Lcom/splendo/kaluga/test/mock/bluetooth/ServiceWrapperBuilder$Descriptor;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getUuid ()Lcom/splendo/kaluga/bluetooth/UUID;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/mock/bluetooth/ServiceWrapperBuilderKt {
	public static final fun characteristic (Ljava/util/ArrayList;Lkotlin/jvm/functions/Function1;)Z
	public static final fun descriptor (Ljava/util/ArrayList;Lcom/splendo/kaluga/bluetooth/UUID;)Z
}

public final class com/splendo/kaluga/test/mock/bluetooth/device/MockAdvertisementData : com/splendo/kaluga/bluetooth/device/BaseAdvertisementData {
	public fun <init> ()V
	public fun <init> (Ljava/lang/String;Ljava/lang/Integer;[BLjava/util/List;Ljava/util/Map;I)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/Integer;[BLjava/util/List;Ljava/util/Map;IILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Ljava/lang/String;
	public final fun component2 ()Ljava/lang/Integer;
	public final fun component3 ()[B
	public final fun component4 ()Ljava/util/List;
	public final fun component5 ()Ljava/util/Map;
	public final fun component6 ()I
	public final fun copy (Ljava/lang/String;Ljava/lang/Integer;[BLjava/util/List;Ljava/util/Map;I)Lcom/splendo/kaluga/test/mock/bluetooth/device/MockAdvertisementData;
	public static synthetic fun copy$default (Lcom/splendo/kaluga/test/mock/bluetooth/device/MockAdvertisementData;Ljava/lang/String;Ljava/lang/Integer;[BLjava/util/List;Ljava/util/Map;IILjava/lang/Object;)Lcom/splendo/kaluga/test/mock/bluetooth/device/MockAdvertisementData;
	public fun equals (Ljava/lang/Object;)Z
	public fun getManufacturerData ()[B
	public fun getManufacturerId ()Ljava/lang/Integer;
	public fun getName ()Ljava/lang/String;
	public fun getServiceData ()Ljava/util/Map;
	public fun getServiceUUIDs ()Ljava/util/List;
	public fun getTxPowerLevel ()I
	public fun hashCode ()I
	public fun isConnectible ()Z
	public fun setConnectible (Z)V
	public fun toString ()Ljava/lang/String;
}

public final class com/splendo/kaluga/test/mock/bluetooth/device/MockDeviceConnectionManager : com/splendo/kaluga/bluetooth/device/BaseDeviceConnectionManager {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;Lcom/splendo/kaluga/bluetooth/device/DeviceWrapper;Lcom/splendo/kaluga/state/StateRepo;)V
	public fun connect (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun disconnect (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun discoverServices (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun getConnectCompleted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun getDisconnectCompleted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun getDiscoverServicesCompleted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun getHandledAction ()Lkotlinx/coroutines/flow/SharedFlow;
	public final fun getPairCompleted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun getPerformActionCompleted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun getPerformActionStarted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun getReadRssiCompleted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun getRequestMtuCompleted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun getUnpairCompleted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun getWaitAfterHandlingAction ()Ljava/util/Map;
	public final fun getWillActionSucceed ()Lco/touchlab/stately/concurrency/AtomicBoolean;
	public fun handleCurrentActionCompleted (ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun pair ()V
	public fun performAction (Lcom/splendo/kaluga/bluetooth/device/DeviceAction;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun readRssi (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun requestMtu (ILkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun reset ()V
	public final fun setWaitAfterHandlingAction (Ljava/util/Map;)V
	public final fun setWillActionSucceed (Lco/touchlab/stately/concurrency/AtomicBoolean;)V
	public fun unpair ()V
}

public final class com/splendo/kaluga/test/mock/bluetooth/scanner/MockBaseScanner : com/splendo/kaluga/bluetooth/scanner/BaseScanner {
	public fun <init> (Lcom/splendo/kaluga/permissions/Permissions;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;ZZLcom/splendo/kaluga/state/StateRepo;Z)V
	public synthetic fun <init> (Lcom/splendo/kaluga/permissions/Permissions;Lcom/splendo/kaluga/bluetooth/device/ConnectionSettings;ZZLcom/splendo/kaluga/state/StateRepo;ZILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun generateEnableSensorsActions ()Ljava/util/List;
	public final fun getPairedDevices ()Lkotlinx/coroutines/flow/MutableStateFlow;
	public final fun getPairedDevicesCompleted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun getRequestEnableCompleted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun getScanForDevicesCompleted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun getStartMonitoringPermissionsCompleted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun getStartMonitoringSensorsCompleted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun getStopMonitoringPermissionsCompleted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun getStopMonitoringSensorsCompleted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun getStopScanningCompleted ()Ljava/util/concurrent/atomic/AtomicReference;
	public final fun isEnabled ()Lkotlinx/coroutines/flow/MutableStateFlow;
	public fun isSupported ()Z
	public fun pairedDevices (Ljava/util/Set;)Ljava/util/List;
	public final fun reset ()V
	public fun scanForDevices (Ljava/util/Set;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun startMonitoringPermissions ()V
	public fun startMonitoringSensors ()V
	public fun stopMonitoringPermissions ()V
	public fun stopMonitoringSensors ()V
	public fun stopScanning (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public class com/splendo/kaluga/test/mock/focus/BaseMockFocusHandler {
	public fun <init> ()V
	protected final fun giveFocus ()V
	public final fun isFocused ()Z
	protected final fun removeFocus ()V
}

public final class com/splendo/kaluga/test/mock/focus/MockFocusHandler : com/splendo/kaluga/test/mock/focus/BaseMockFocusHandler, com/splendo/kaluga/keyboard/FocusHandler {
	public fun <init> ()V
	public final fun simulateGiveFocus ()V
	public final fun simulateRemoveFocus ()V
}

public final class com/splendo/kaluga/test/mock/hud/MockHUD : com/splendo/kaluga/hud/BaseHUD {
	public fun <init> (Lcom/splendo/kaluga/hud/HudConfig;Lkotlinx/coroutines/CoroutineScope;)V
	public fun dismiss (ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun getHudConfig ()Lcom/splendo/kaluga/hud/HudConfig;
	public fun isVisible ()Z
	public fun present (ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/splendo/kaluga/test/mock/hud/MockHUD$Builder : com/splendo/kaluga/hud/BaseHUD$Builder {
	public fun <init> ()V
	public synthetic fun create (Lcom/splendo/kaluga/hud/HudConfig;Lkotlinx/coroutines/CoroutineScope;)Lcom/splendo/kaluga/hud/BaseHUD;
	public fun create (Lcom/splendo/kaluga/hud/HudConfig;Lkotlinx/coroutines/CoroutineScope;)Lcom/splendo/kaluga/test/mock/hud/MockHUD;
	public final fun getBuiltHUDs ()Ljava/util/List;
}

public final class com/splendo/kaluga/test/mock/keyboard/MockKeyboardManager : com/splendo/kaluga/keyboard/BaseKeyboardManager {
	public fun <init> ()V
	public fun hide ()V
	public final fun isShown ()Z
	public fun show (Lcom/splendo/kaluga/keyboard/FocusHandler;)V
}

public final class com/splendo/kaluga/test/mock/keyboard/MockKeyboardManager$Builder : com/splendo/kaluga/keyboard/BaseKeyboardManager$Builder {
	public fun <init> ()V
	public fun create (Lkotlinx/coroutines/CoroutineScope;)Lcom/splendo/kaluga/keyboard/BaseKeyboardManager;
}

public final class com/splendo/kaluga/test/mock/permissions/MockPermissionContextKt {
	public static final fun getMockPermissionContext ()Lcom/splendo/kaluga/permissions/PermissionContext;
}

public final class com/splendo/kaluga/test/mock/permissions/MockPermissionsBuilder : com/splendo/kaluga/permissions/PermissionsBuilder {
	public fun <init> ()V
	public final fun getBluetoothPMManager ()Lcom/splendo/kaluga/test/MockPermissionManager;
	public final fun getCalendarPMManager ()Lcom/splendo/kaluga/test/MockPermissionManager;
	public final fun getCameraPMManager ()Lcom/splendo/kaluga/test/MockPermissionManager;
	public final fun getContactsPMManager ()Lcom/splendo/kaluga/test/MockPermissionManager;
	public final fun getLocationPMManager ()Lcom/splendo/kaluga/test/MockPermissionManager;
	public final fun getMicrophonePMManager ()Lcom/splendo/kaluga/test/MockPermissionManager;
	public final fun getNotificationsPMManager ()Lcom/splendo/kaluga/test/MockPermissionManager;
	public final fun getStoragePMManager ()Lcom/splendo/kaluga/test/MockPermissionManager;
	public final fun registerAllPermissionsBuilders ()V
	public final fun setBluetoothPMManager (Lcom/splendo/kaluga/test/MockPermissionManager;)V
	public final fun setCalendarPMManager (Lcom/splendo/kaluga/test/MockPermissionManager;)V
	public final fun setCameraPMManager (Lcom/splendo/kaluga/test/MockPermissionManager;)V
	public final fun setContactsPMManager (Lcom/splendo/kaluga/test/MockPermissionManager;)V
	public final fun setLocationPMManager (Lcom/splendo/kaluga/test/MockPermissionManager;)V
	public final fun setMicrophonePMManager (Lcom/splendo/kaluga/test/MockPermissionManager;)V
	public final fun setNotificationsPMManager (Lcom/splendo/kaluga/test/MockPermissionManager;)V
	public final fun setStoragePMManager (Lcom/splendo/kaluga/test/MockPermissionManager;)V
}

public final class com/splendo/kaluga/test/mock/resources/MockColorLoader : com/splendo/kaluga/resources/KalugaColorLoader {
	public fun <init> (Ljava/lang/Integer;)V
	public synthetic fun <init> (Ljava/lang/Integer;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> (Ljava/util/Map;)V
	public fun loadColor (Ljava/lang/String;Ljava/lang/Integer;)Ljava/lang/Integer;
}

public final class com/splendo/kaluga/test/mock/resources/MockFontLoader : com/splendo/kaluga/resources/FontLoader {
	public fun <init> (Lcom/splendo/kaluga/resources/Font;)V
	public synthetic fun <init> (Lcom/splendo/kaluga/resources/Font;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> (Ljava/util/Map;)V
	public fun loadFont (Ljava/lang/String;Lcom/splendo/kaluga/resources/Font;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class com/splendo/kaluga/test/mock/resources/MockImageLoader : com/splendo/kaluga/resources/ImageLoader {
	public fun <init> (Lcom/splendo/kaluga/resources/Image;)V
	public synthetic fun <init> (Lcom/splendo/kaluga/resources/Image;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> (Ljava/util/Map;)V
	public fun loadImage (Ljava/lang/String;Lcom/splendo/kaluga/resources/Image;)Lcom/splendo/kaluga/resources/Image;
}

public final class com/splendo/kaluga/test/mock/resources/MockResourcesKt {
	public static final fun mockColor ()I
	public static final fun mockFont ()Lcom/splendo/kaluga/resources/Font;
	public static final fun mockImage ()Lcom/splendo/kaluga/resources/Image;
}

public final class com/splendo/kaluga/test/mock/resources/MockStringLoader : com/splendo/kaluga/resources/StringLoader {
	public fun <init> (Ljava/lang/String;Ljava/lang/String;)V
	public synthetic fun <init> (Ljava/lang/String;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun <init> (Ljava/util/Map;Ljava/util/Map;)V
	public fun loadQuantityString (Ljava/lang/String;ILjava/lang/String;)Ljava/lang/String;
	public fun loadString (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
}

public final class com/splendo/test/mock/bluetooth/MockDescriptor : com/splendo/kaluga/bluetooth/Descriptor {
	public fun <init> (Lcom/splendo/kaluga/bluetooth/DescriptorWrapper;Lcom/splendo/kaluga/state/StateRepo;)V
	public final fun getDidUpdate ()Lkotlinx/coroutines/CompletableDeferred;
	public fun updateValue (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

