println "tasks: $gradle.startParameter.taskNames"

// set some global variables
gradle.ext {
    kotlin_version = kotlin_version
    kotlinx_coroutines_version = '1.4.3-native-mt'
    stately_version = '1.1.4'
    stately_isolate_version = '1.1.4-a1'
    koin_version = '3.0.1'
    serialization_version = '1.1.0'
    library_version = '0.2.0'
    android_min_sdk_version = 21
    android_target_sdk_version = 30
    android_build_tools_version = "30.0.3"

    play_services_version = "17.1.0"
    play_core_version = "1.9.0"
    play_core_ktx_version = "1.8.1"

    androidx_appcompat_version = "1.2.0"
    androidx_fragment_version = "1.2.5"
    androidx_core_version = "1.3.2"
    androidx_lifecycle_version = "2.4.0-alpha01"
    androidx_lifecycle_viewmodel_compose_version = "1.0.0-alpha04"
    androidx_arch_core_testing_version = "2.1.0"
    androidx_browser_version = "1.2.0"

    // sub packages of test have different versions, but alpha/beta/rc releases are harmonized
    androidx_test_version_postfix = ""
    androidx_test_version = "1.3.0$androidx_test_version_postfix"
    androidx_test_espresso_version = "3.3.0$androidx_test_version_postfix"
    androidx_test_junit_version = "1.1.2$androidx_test_version_postfix"

    androidx_compose_version = "1.0.0-beta05"
    androidx_activity_compose_version = "1.3.0-alpha07"

    // used/modified at runtime.
    component_type_default = "default"
    component_type_compose = "compose"
    component_type_app = "app"
    component_type_composeApp = "composeApp"
    component_type = component_type_default
}

if (System.env.containsKey("EXAMPLE_AS_ROOT")) {
    gradle.ext.exampleAsRoot = Boolean.parseBoolean(System.env.EXAMPLE_AS_ROOT)
    println "System env EXAMPLE_AS_ROOT set to $System.env.EXAMPLE_AS_ROOT, using $gradle.ext.exampleAsRoot"
} else {
    // load some more from local.properties or set defaults.
    def props = new Properties()
    def propfile = file("../local.properties")
    if (propfile.exists()) {
        propfile.withInputStream { props.load(it) }
        gradle.ext.exampleAsRoot = Boolean.parseBoolean(props["exampleAsRoot"].toString())
        println "local.properties read (exampleAsRoot=${props['exampleAsRoot']}, using $gradle.ext.exampleAsRoot)"
    } else {
        gradle.ext.exampleAsRoot = false
        println "local.properties not found, using default values (exampleAsRoot=$gradle.ext.exampleAsRoot)"
    }
}


// based on https://github.com/Kotlin/xcode-compat/blob/d677a43edc46c50888bca0a7890a81f976a42809/xcode-compat/src/main/kotlin/org/jetbrains/kotlin/xcodecompat/XcodeCompatPlugin.kt#L16
def sdkName = System.getenv("SDK_NAME") ?: "unknown"
if (sdkName.startsWith("iphoneos")) {
    gradle.ext.ios_primary_arch = "iosarm64"
    gradle.ext.ios_secondary_arch = "iosx64"
}
else {
    gradle.ext.ios_primary_arch = "iosx64"
    gradle.ext.ios_secondary_arch = "iosarm64"
}

println("Detected primary arch from sdk $sdkName: $gradle.ext.ios_primary_arch")


// set global variable to decide how many iOS source sets to use. More than one sourceset can create problems for project dependencies and gives false errors in the IDE
// currently the xcodecompat plugin also supports only arm64/iosx64 so this is off by default
// it is automatically enabled when publishing, in order to generate multiple artifacts
def envFlag = System.env.IOS_ONE_SOURCESET
boolean isPublishTask = gradle.startParameter.taskNames.any  { it.startsWith("publish") }
gradle.ext.ios_one_sourceset = envFlag == null ? !isPublishTask : Boolean.parseBoolean(envFlag)
println "Using a single iOS sourceset (env IOS_ONE_SOURCESET=$envFlag, isPublishTask=$isPublishTask): $gradle.ext.ios_one_sourceset"
